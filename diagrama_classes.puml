@startuml diagrama_classes
' Configurações gerais para o diagrama
skinparam classAttributeIconSize 0 ' Esconde ícones de visibilidade (preferência pessoal para diagramas mais limpos)
hide empty members
left to right direction

' Classes de Modelo
abstract class User {
    # password: String
    - username: String
    - email: String
    - name: String
    - authenticate(enteredPassword: String): boolean
}

class Student {
    - studentId: String
    + toString(): String
}

class Administrator {
    + toString(): String
}

class Classroom {
    {static} - _serialVersionUID: long
    - name: String
    - capacity: int
    - location: String
    - hasProjector: boolean
    - features: List<String>
    + equals(other: Object): boolean
    + hashCode(): int
    + hasProjector(): boolean
    + addFeature(feature: String): void
    + removeFeature(feature: String): void
    + toString(): String
    
}

enum ReservationStatus {
    CONFIRMED
    PENDING
    CANCELLED
}

class Reservation {
    {static} - _serialVersionUID: long
    {static} - nextReservationId: int
    - id: int
    - classroom: Classroom
    - reservedBy: User
    - date: LocalDate
    - startTime: LocalTime
    - endTime: LocalTime
    - purpose: String
    - status: ReservationStatus
    - observation: String
    {static} - generateNextId(): int
    - toString(): String
    - equals(other: Object): boolean
    - hashCode(): int
    {static} -  generateNextId(): int
    + conflictsWith(other: Reservation): boolean
}

' Classes de Gerenciamento e Utilitários
class ReservationManager {
    {static} - _serialVersionUID: long
    - classrooms: List<Classroom>
    - reservations: List<Reservation>
    - users: List<User>
    + addClassroom(classroom: Classroom): void
    + removeClassroom(classroom: Classroom): void
    + addUser(user: User): void
    + makeReservation(classroom: Classroom, reservedBy: User, date LocalDate, startTime: LocalTime, endTime LocalTime, purpose String): void
    + findAvailableClassrooms(date: LocalDate, startTime: LocalTime, endTime: LocalTime): List<Classroom>
    + findAvailableClassrooms(date: LocalDate, startTime: LocalTime, endTime: LocalTime, minCapacity: int): List<Classroom>
    + confirmReservation( reservation: Reservation): void
    + rejectReservation(reservation: Reservation, observation: String): void
    + cancelReservation(reservation: Reservation): void
    + deleteReservation(reservation: Reservation): void
    + loadData(): void
    + saveData(): void
}

class FileUtil {
    {static} + writeObjectToFile(objects: List<T>, filename: String): void
    {static} + readObjectFromFile(filename: String): List<T>
}

' Classes da GUI (representação simplificada para o diagrama de classes)
class MainFrame {
    - manager: ReservationManager
    - loggedInUser: User
    - parentLoginDialog: LoginDialog
    - tabbedPane: JTabbedPane
    - classroomPanel: ClassroomPanel
    - reservationPanel: ReservationPanel
    - calendarPanel: CalendarPanel
    - adminReservationPanel: AdminReservationPanel
    - adminClassroomPanel: AdminClassroomPanel
    - logoutButton: JButton
    - initUI(): void
    - performLogout(): void
    - performExit(): void
    + refreshPanels(): void
}

class LoginDialog {
    - usernameField: JTextField
    - passwordField: JPasswordField
    - loginButton: JButton
    - createAccountButton: JButton
    - forgotPasswordButton: JButton
    - manager: ReservationManager
    - authenticatedUser: User
    - loginListener: LoginListener
    - initUI(): void
    - performLogin(): void
    - openRegisterDialog(): void
    - openForgotPasswordDialog(): void
    + clearFields(): void
}

interface LoginListener {
    + onLoginSuccess(user: User): void
}

class ClassroomPanel {
    - manager: ReservationManager
    - classroomTable: JTable
    - classroomTableModel: DefaultTableModel
    - initComponents(): void
    + refreshClassroomList(): void
}

class ReservationPanel {
    - manager: ReservationManager
    - loggedInUser: User
    - reservationTable: JTable
    - reservationTableModel: DefaultTableModel
    - newReservationButton: JButton
    - cancelReservationButton: JButton
    - initComponents(): void
    - openNewReservationDialog(): void
    - cancelSelectedReservation(): void
    + refreshReservationList(): void
}

class AddClassroomDialog {
    - nameField: JTextField
    - capacitySpinner : JSpinner
    - locationField: JTextField
    - projectorCheckBox: JCheckBox
    - featuresField: JTextField
    - addButton: JButton
    - manager: ReservationManager
    - initUI(): void
    + addClassroom(): void
}

class AdminReservationPanel {
    - manager: ReservationManager
    - reservationTable: JTable
    - reservationTableModel: DefaultTableModel
    - confirmButton: JButton
    - rejectButton: JButton
    - cancelButton: JButton
    - deleteButton: JButton
    - refreshButton: JButton
    - initComponents(): void
    - confirmSelectedReservation(): void
    - rejectSelectedReservation(): void
    - cancelSelectedReservation(): void
    - deleteSelectedReservation(): void
    + refreshReservationList(): void
}

class AdminClassroomPanel {
    - manager: ReservationManager
    - classroomTable: JTable
    - classroomTableModel: DefaultTableModel
    - addButton: JButton
    - removeButton: JButton
    - mainframe: Frame
    - initComponents(): void
    - addSelectedClassroom(): void
    - removeSelectedClassroom(): void
    + refreshClassroomList(): void
}

class CalendarPanel {
    - manager: ReservationManager
    - calendarGridPanel: JPanel
    - monthYearLabel: JLabel
    - prevMonthButton: JButton
    - nextMonthButton: JButton
    - reservationsForDayTable: JTable
    - reservationsForDayTableModel: DefaultTableModel
    - currentMonth: YearMonth
    - selectedDate: LocalDate
    - initComponents(): void
    - navigateMonth(months: int): void
    - updateCalendarGrid(): void
    - displayReservationsForSelectedDate(): void
    - refreshReservationsForSelectedDate(): void
}

class ForgotPasswordDialog {
    - usernameField: JTextField
    - fullNameField: JTextField
    - emailField: JTextField
    - raField : JTextField
    - newPassowrdField: JPasswordField
    - confirmPasswordField: JPasswordField
    - resetPasswordButton: JButton
    - userTypeComboBox: JComboBox<String>
    - manager: ReservationManager
    - foundUser: User
    - initUI(): void
    - updateFieldsVisibility(): void
    - validateAndResetPassword(): void
    - resetUserPassword(): void
}

class RegisterDialog {
    - usernameField: JTextField
    - passwordField: JPasswordField
    - fullNameField: JTextField
    - emailField: JTextField
    - raField: JTextField
    - userTypeComboBox: JComboBox<String>
    - registerButton: JButton
    - manager: ReservationManager
    - initUI(): void
    - updateFieldsVisibility(): void
    - validateFields(): void
    - perforRegistration(): void
}

' Classes de Exceção
class ReservationConflictException << (E,red) >> extends Exception {
    + ReservationConflictException(message: String)
    + ReservationConflictException(message: String, cause: Throwable)
}

class ConflictException << (E,red) >> extends Exception {
    + UserConflictException(message: String)
    + UserConflictException(message: String, cause: Throwable)
}

' Relacionamentos

' Herança (Generalização)
User <|-- Student
User <|-- Administrator
ReservationConflictException --|> RuntimeException
UserConflictException --|> RuntimeException

' Relações de Associação/Agregação/Composição
ReservationManager "1" o-- "0..*" Classroom : contains
ReservationManager "1" o-- "0..*" Reservation : manages
ReservationManager "1" o-- "0..*" User : manages

Reservation "1" -- "1" Classroom
Reservation "1" -- "1" User
Reservation "1" -- "1" ReservationStatus

' Relações de Dependência (GUI para Manager)
LoginDialog ..> ReservationManager
MainFrame ..> ReservationManager
AddClassroomDialog ..> ReservationManager
AdminClassroomPanel ..> ReservationManager
AdminReservationPanel ..> ReservationManager
CalendarPanel ..> ReservationManager
ClassroomPanel ..> ReservationManager
ForgotPasswordDialog ..> ReservationManager
RegisterDialog ..> ReservationManager
ReservationPanel ..> ReservationManager

' Relações de Dependência (GUI para Classes de Modelo)
AddClassroomDialog ..> Classroom
AdminClassroomPanel ..> Classroom
AdminReservationPanel ..> Reservation
CalendarPanel ..> Reservation
CalendarPanel ..> ReservationStatus
ClassroomPanel ..> Classroom
ReservationPanel ..> Classroom
ReservationPanel ..> Reservation
ReservationPanel ..> User
ForgotPasswordDialog ..> User
ForgotPasswordDialog ..> Student
RegisterDialog ..> User
RegisterDialog ..> Administrator
RegisterDialog ..> Student
LoginDialog ..> User
MainFrame ..> User

' Relações de Dependência (Manager para Exceções e Utilitários)
ReservationManager ..> ReservationConflictException
ReservationManager ..> UserConflictException
ReservationManager ..> FileUtil

' Relações GUI-GUI
LoginDialog ..> RegisterDialog
LoginDialog ..> ForgotPasswordDialog
MainFrame ..> LoginDialog
MainFrame ..> ClassroomPanel
MainFrame ..> ReservationPanel
MainFrame ..> CalendarPanel
MainFrame ..> AdminClassroomPanel
MainFrame ..> AdminReservationPanel
AdminClassroomPanel ..> AddClassroomDialog

' Interface LoginListener (LoginDialog implements LoginListener)
LoginDialog .up.|> LoginListener

@enduml